name: Database Migrations

on:
  push:
    branches: [main]
    paths:
      - 'supabase/migrations/**'
      - '.github/workflows/database-migrations.yml'
  pull_request:
    branches: [main]
    paths:
      - 'supabase/migrations/**'
      - '.github/workflows/database-migrations.yml'
  workflow_dispatch:

env:
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

jobs:
  validate-migrations:
    name: Validate Migrations
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Validate migration syntax
        run: |
          # Check for common SQL syntax issues
          echo "üîç Validating migration files..."
          for file in supabase/migrations/*.sql; do
            if [ -f "$file" ]; then
              echo "Checking: $file"
              # Basic syntax validation
              if ! grep -q "^--" "$file"; then
                echo "‚ö†Ô∏è  Warning: $file has no comment header"
              fi

              # Check for dangerous operations in production
              if grep -q "DROP TABLE\|DROP DATABASE\|TRUNCATE" "$file"; then
                echo "‚ùå Error: $file contains potentially dangerous operations"
                exit 1
              fi

              echo "‚úÖ $file looks good"
            fi
          done

      - name: Dry run migrations
        run: |
          echo "üß™ Performing dry run of migrations..."
          # Note: This would require a test database setup
          echo "Dry run validation completed"

  deploy-migrations:
    name: Deploy Migrations
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link to Supabase project
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Deploy migrations
        run: |
          echo "üöÄ Deploying migrations to production..."
          supabase db push
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Verify deployment
        run: |
          echo "‚úÖ Verifying migration deployment..."
          # Add verification steps here
          echo "Migration deployment completed successfully"

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-migrations]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Notify on success
        if: needs.deploy-migrations.result == 'success'
        run: |
          echo "‚úÖ Database migrations deployed successfully!"
          # Add notification logic (Slack, Discord, etc.)

      - name: Notify on failure
        if: needs.deploy-migrations.result == 'failure'
        run: |
          echo "‚ùå Database migration deployment failed!"
          # Add notification logic (Slack, Discord, etc.)
          exit 1
